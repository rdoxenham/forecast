#!/usr/bin/python
# Red Hat Cloud Forecast v0.1-beta
# Rhys Oxenham <roxenham@redhat.com>

import sys
import getopt
import pg
import urllib
import urllib2
import base64
import os
import shutil
import subprocess
import getpass
import time
import datetime
from xml.dom import minidom
from lxml import etree as ET

VERSION = "1.0"

def usage():
	print "Usage: " + sys.argv[0],
	print "<option> [argument]\n"
	print "\t-h, --help\t\tPrints this usage/help menu"
	print "\t-s, --start\t\tStarts Forecast in Daemon mode"
	print "\t-k, --kill\t\tKills Forecast Daemon"
	print "\t-i, --install\t\tInstalls Forecast from scratch"
	print "\t-t, --test\t\tChecks and tests the current configuration"
	print "\t-c, --configure\t\tConfigures Forecast interactively"
	print "\t-l, --list\t\tLists the current adaptor configuration"
	print "\t-e, --export\t\tManually exports current statistics"
	print "\t-r, --realtime\t\tPrint out real-time statistics of consumption"
	print"\t\t\t\t--name <vmname> specifies individual machine"
	print "\n\tExamples: " + sys.argv[0],
	print " --start"
	print "\t\t  " + sys.argv[0],
	print " --install"
	print "\t\t  " + sys.argv[0],
	print " --configure"
	print "\t\t  " + sys.argv[0],
	print " --realtime --name rhel5-vm1\n"
	sys.exit(2)
	
def grab_config():
	conf = None
	try:
		conf = open("/etc/forecast.conf")
	except:
		return None
	return conf

def check_running():
	pid = None
	try:
		pid = open("/opt/forecast/forecast.pid")
	except:
		return False
	return True

def check_db(db_type, db_path, db_user, db_pass):
	try:
		db_connection = pg.connect(dbname=db_path, host="localhost", user=db_user, passwd=db_pass)
		db_connection.close()
	except: return False
	return True

def check_db_tables(db_type, db_path, db_user, db_pass):
	vmstats = True
	adaptors = True

	try:
		db_connection = pg.connect(dbname=db_path, host="localhost", user=db_user, passwd=db_pass)
	except: return False, False
		# ^^ We should never get to this point

	try: check_vmstats = db_connection.query("SELECT * FROM vm_stats;")
	except: vmstats = False
	try: check_adaptors = db_connection.query("SELECT * FROM adaptors;")
	except: adaptors = False
 		
	db_connection.close()

	return vmstats, adaptors

def get_adaptors(db_type, db_path, db_user, db_pass):
	try:
		db_connection = pg.connect(dbname=db_path, host="localhost", user=db_user, passwd=db_pass)
		results = db_connection.query("SELECT * FROM adaptors;")
	except: return None

	db_connection.close()
	return results.getresult()

def get_adaptor_status(this_adaptor):
	if "RHEV" in this_adaptor[2]:
		xml = None
		try:
			headers = {'Accept' : 'application/xml', 'Content-type' : 'application/xml'}
			request = urllib2.Request(this_adaptor[1], xml, headers)
	
			base64string = base64.encodestring('%s:%s' % (this_adaptor[3], this_adaptor[4])).replace('\n', '')
			request.add_header("Authorization", "Basic %s" % base64string)
		except: return None

		try: result = urllib2.urlopen(request)
		except: result = None
		
		if result:
			rhev_xml = result.read()
			dom_object = minidom.parseString(rhev_xml)
			vms = len(dom_object.getElementsByTagName('vm'))
			return vms

		else: return None
	else: return None

def failed():
	print "\nERROR: One or more checks failed. Please validate configuration!"
	sys.exit(2)

def list_adaptors():
	conf = grab_config()
	if conf: 
		DB_TYPE, DB_PATH, DB_USER, DB_PASS = parse_config(conf)
	else: print "ERROR: No configuration found! [Exiting]"

	adaptors = get_adaptors(DB_TYPE, DB_PATH, DB_USER, DB_PASS)

	i = 1
	if adaptors != None and len(adaptors) > 0:
		for adaptor in adaptors:
			print "#%d: \tName: %s" % (i, adaptor[0])
			print "\tURL: %s" % adaptor[1]
			print "\tUser: %s\n" % adaptor[3]
			i += 1

	else: print "ERROR: No adaptors found!"
	sys.exit(1)

def parse_config(conf):
	DB_TYPE = None
	DB_PATH = None
	DB_USER = None
	DB_PASS = None

	while 1:
    		line = conf.readline()
		if not "#" in line:
			if "DB_TYPE" in line:
				line = line.strip()
				value = line.split('=')
				try: 
					if len(value[1]) > 0: DB_TYPE = value[1]
				except: DB_TYPE = None
			if "DB_PATH" in line:
				line = line.strip()
				value = line.split('=')
				try: 
					if len(value[1]) > 0: DB_PATH = value[1]
				except: DB_PATH = None
			if "DB_USER" in line:
				line = line.strip()
				value = line.split('=')
				try:
					if len(value[1]) > 0: DB_USER = value[1]
				except: DB_USER = None
			if "DB_PASS" in line:
				line = line.strip()
				value = line.split('=')
				try: 
					if len(value[1]) > 0: DB_PASS = value[1]
				except: DB_PASS = None
    		if not line: break
	return DB_TYPE, DB_PATH, DB_USER, DB_PASS

def create_db(db_type, db_path, db_user, db_pass):
	try:
		os.system("service postgresql stop > /dev/null 2>&1")
		shutil.rmtree('/var/lib/pgsql/data')
		os.system("su - postgres -c initdb > /dev/null 2>&1")
		os.system("restorecon -R /var/lib/pgsql")
		os.system("service postgresql start > /dev/null 2>&1")
		db_connection = pg.connect(dbname="postgres", host="localhost", user="postgres")
		db_connection.query("CREATE ROLE " + db_user + ";")
		alter_role = "ALTER ROLE " + db_user + " WITH SUPERUSER INHERIT CREATEROLE"
		alter_role += " CREATEDB LOGIN PASSWORD '" + db_pass + "' VALID UNTIL '2050-01-31 00:00:00+00';"
		db_connection.query(alter_role)
		db_connection.close()
		os.system("su - postgres -c \"psql -e template1 < /usr/share/forecast/forecast.sql\" > /dev/null 2>&1")
	except:
		return False
	return True

def conf_services():
	try:
		os.system("chkconfig postgresql on > /dev/null 2>&1")	
		#os.system("chkconfig forecast-service on > /dev/null 2>&1")
	except: return False
	return True

def create_conf_file():
	try: shutil.copy('/usr/share/forecast/forecast.conf.sample','/etc/forecast.conf')
	except: return False
	return True

def run_test():
	print "> Configuration File:"
	print "\tLooking for /etc/forecast.conf:",

	conf_found = True
	conf = grab_config()
	if conf != None: print "\t\tOK"
	else: 
		print "FAIL"
		conf_found = False

	if conf_found:
		DB_TYPE, DB_PATH, DB_USER, DB_PASS = parse_config(conf)
		any_checked = False
	
		print "\tChecking if Database TYPE is set:",
		if DB_TYPE != None: print "\t\tOK"
		else: 
			print "\t\tFAIL"
			any_checked = True

		print "\tChecking if Database PATH is set:",
		if DB_PATH != None: print "\t\tOK"
		else: 
			print "\t\tFAIL"
			any_checked = True

		print "\tChecking if Database USERNAME is set:",
		if DB_USER != None: print "\t\tOK"
		else: 
			print "\t\tFAIL"
			any_checked = True

		print "\tChecking if Database PASSWORD is set:",
		if DB_PASS != None: print "\t\tOK"
		else: 
			print "\t\tFAIL"
			any_checked = True

		if any_checked: failed()

	else: failed() 
	
	print "\n> Database Connectivity:"
	print "\tChecking if we can connect to the database:",
	db_check = check_db(DB_TYPE, DB_PATH, DB_USER, DB_PASS)
	if db_check: print "\tOK"
	else: 
		print "\tFAIL"
		failed()

	table_results = check_db_tables(DB_TYPE, DB_PATH, DB_USER, DB_PASS)

	print "\tChecking if VM_STATS table exists:",
	if table_results[0] == True: print "\t\tOK"
	else: print "\t\tFAIL"

	print "\tChecking if ADAPTORS table exists:",
	if table_results[1] == True: print "\t\tOK"
	else: print "\t\tFAIL"

	if table_results[0] == False or table_results[1] == False: failed()

	adaptors = get_adaptors(DB_TYPE, DB_PATH, DB_USER, DB_PASS)
	print "\n> Configured Adaptors:"
	print "\tNumber of adaptors found:\t\t\t%d" % len(adaptors)

	i = 0
	if len(adaptors) > 0:
		print "\tTesting Adaptors:"
		for adaptor in adaptors:
			print "\t\t#%d: %s" % (i, adaptor[0]),
			vm_count = get_adaptor_status(adaptor)
			if vm_count != None:
				print "\t\t\tOK (%s VMs)" % vm_count
			else: print "\t\t\tFAIL"
			i += 1
	sys.exit(1)

def run_query(sql_query, DB_PATH, DB_USER, DB_PASS):
	result = None
	try:
		db_connection = pg.connect(dbname=DB_PATH, host="localhost", user=DB_USER, passwd=DB_PASS)
		result = db_connection.query(sql_query)
		db_connection.close()
	except: return None
	return result

def add_adaptor(name, url, ad_type, user, passwd):
	sql_query = "INSERT INTO adaptors(adaptor_name, adaptor_url, adaptor_type, adaptor_user, adaptor_pass)"
	sql_query += " values('" + name + "','" + url + "','" + ad_type + "','" + user + "','" + passwd + "');"
	return sql_query

def update_adaptor(name, new_name, url, user, passwd):
	comma = False
	sql_query = "UPDATE adaptors SET "

	if new_name != None:
		sql_query += "adaptor_name = '" + new_name + "'"
		comma = True
	if url != None:
		if comma: sql_query += ", "
		sql_query += "adaptor_url = '" + url + "'"
		comma = True
	if user != None:
		if comma: sql_query += ", "
		sql_query += "adaptor_user = '" + user + "'"
		comma = True
	if passwd != None:
		if comma: sql_query += ", "
		sql_query += "adaptor_pass = '" + passwd + "'"

	sql_query += " WHERE adaptor_name = '" + name + "';"
	return sql_query

def configure_menu():
	print "What do you want to do?\n"
	print "1) Add a new adaptor"
	print "2) Edit an existing adaptor"
	print "3) Delete an existing adaptor"
	print "0) Quit\n"
	answer = raw_input("Enter Option: ")
	return answer

def ask_question(question, hidden):
	answer = None
	if not hidden:
		while answer == "" or answer == None:
			answer = raw_input(question)
	else:
		while answer == None:
			answer = getpass.getpass("Enter Password: ")
	return answer

def configure():
	conf = grab_config()
	DB_TYPE = None
	DB_PATH = None
	DB_USER = None
	DB_PASS = None

	if conf: 
		DB_TYPE, DB_PATH, DB_USER, DB_PASS = parse_config(conf)
	else: 
		print "ERROR: No configuration found! [Exiting]"
		sys.exit(2)

	answer = None
	while answer == "" or answer == None:
		answer = configure_menu()
	try: answer = int(answer)
	except: 
		print "\nERROR: Please choose a valid option!\n"
		configure()

	print ""

	if answer == 1:
		name = ask_question("Enter Adaptor name: ", False)
			
		ad_type = None
		while ad_type == "" or ad_type == None:
			ad_type = raw_input("Enter Adaptor type [RHEV/VMware/Hyper-V]: ").upper()
			if ad_type not in ['RHEV', 'VMWARE', 'HYPER-V']: ad_type = None

		url_string = ":8443/api/vms"
		if ad_type == "RHEV":
			rhev_ver = raw_input("Which version of RHEV are you using? [2|3]: ")
			try:
				if int(rhev_ver) == 2: url_string = ":8543/rhevm-api-powershell/vms"
			except: print "WARNING: Defaulting to RHEV 3 configuration."
		
		server = ask_question("Enter Server Hostname: ", False)
		url = "https://%s%s" % (server, url_string)
		
		user = ask_question("Enter Username: ", False)
		passwd = ask_question("Enter Password: ", True)

		sql_query = add_adaptor(name, url, ad_type, user, passwd)
		success = run_query(sql_query, DB_PATH, DB_USER, DB_PASS)
		if success != None:
			print "\nAdaptor '%s' was added successfully." % name
			sys.exit(1)
		else:
			print "\nERROR: Adaptor removal unsuccessful."
			print "Please test with 'forecast --test'"
			sys.exit(2)

	if answer == 2:
		adaptors = get_adaptors(DB_TYPE, DB_PATH, DB_USER, DB_PASS)
		if adaptors != None and len(adaptors) > 0:
			i = 1
			print "Select the adaptor to edit...\n"
			for adaptor in adaptors:
				print "#%d: \tName: %s" % (i, adaptor[0])
				print "\tURL: %s" % adaptor[1]
				print "\tUser: %s\n" % adaptor[3]
				i += 1
		else:
			print "\nERROR: No adaptors to edit!"
			sys.exit(2)

		chosen_adaptor = None
		while chosen_adaptor == None:
			chosen_adaptor = raw_input("Edit Adaptor #: ")
			try:
				if int(chosen_adaptor) > len(adaptors):
					print "ERROR: Adaptor #%s does not exist, try again!" % chosen_adaptor
					chosen_adaptor = None
			except: chosen_adaptor = None

		if int(chosen_adaptor) != 0:
			the_adaptor = adaptors[int(chosen_adaptor)-1]
			print "\nNew Adaptor Name [%s]:" % the_adaptor[0],
			new_name = raw_input()
			if new_name == the_adaptor[0] or new_name == "": new_name = None

			print "New Adaptor URL [%s]:" % the_adaptor[1],
			new_url = raw_input()
			if new_url == the_adaptor[1] or new_url == "": new_url = None

			print "New Adaptor Username [%s]:" % the_adaptor[3],
			new_user = raw_input()
			if new_user == the_adaptor[3] or new_user == "": new_user = None

			new_pass = getpass.getpass("New Adaptor Password: ")
			if new_pass == the_adaptor[4] or new_pass == "": new_pass = None

			sql_query = update_adaptor(the_adaptor[0], new_name, new_url, new_user, new_pass)
			success = run_query(sql_query, DB_PATH, DB_USER, DB_PASS)

			if success != None:
				print "\nAdaptor '%s' was modified successfully." % the_adaptor[0]
				sys.exit(1)
			else:
				print "\nERROR: Adaptor was not modified - Database error."
				print "Please test with 'forecast --test'"
				sys.exit(2)

		else: print "WARNING: User Cancelled Edit"
		sys.exit(1)

	if answer == 3:
		adaptors = get_adaptors(DB_TYPE, DB_PATH, DB_USER, DB_PASS)
		if adaptors != None and len(adaptors) > 0:
			i = 1
			print "Select the adaptor to delete...\n"
			for adaptor in adaptors:
				print "#%d: \tName: %s" % (i, adaptor[0])
				print "\tURL: %s" % adaptor[1]
				print "\tUser: %s\n" % adaptor[3]
				i += 1
		else:
			print "\nERROR: No adaptors to delete!"
			sys.exit(2)

		chosen_adaptor = None
		while chosen_adaptor == None:
			chosen_adaptor = raw_input("Delete Adaptor #: ")
			try:
				if int(chosen_adaptor) > len(adaptors):
					print "ERROR: Adaptor #%s does not exist, try again!" % chosen_adaptor
					chosen_adaptor = None
			except: chosen_adaptor = None

		if int(chosen_adaptor) != 0:
			the_adaptor = adaptors[int(chosen_adaptor)-1][0]
			sql_query = "DELETE FROM adaptors WHERE adaptor_name = '" + the_adaptor + "';"
			success = run_query(sql_query, DB_PATH, DB_USER, DB_PASS)

			if success != None:
				print "\nAdaptor '%s' was removed successfully." % the_adaptor
				sys.exit(1)
			else:
				print "\nERROR: Adaptor was not removed - Database error."
				print "Please test with 'forecast --test'"
				sys.exit(2)

		else: print "WARNING: User Cancelled Deletion"
		sys.exit(1)

	if answer == 0: sys.exit(1)
	else: 
		print "\nERROR: Please choose a valid option!\n"
		configure()

	sys.exit(1)

def install():
	print "Checking if Forecast is already installed...",
	already_installed = False

	conf = grab_config()
	if not conf:
		success = create_conf_file()
		if success:
			conf = grab_config()
		else:
			print "\nERROR: Could not create default config to test tables. Are you root?"
			sys.exit(2)

	DB_TYPE, DB_PATH, DB_USER, DB_PASS = parse_config(conf)
	table_results = check_db_tables(DB_TYPE, DB_PATH, DB_USER, DB_PASS)
	if table_results[0] == True or table_results[1] == True: already_installed = True

	complete_install = True

	if already_installed:
		print "\t\tYES"
		print "\nERROR: Forecast seems to be already installed!"
		answer = raw_input("Do you wish to reinstall? [Y/N]: ")
		if answer == "Y" or answer == "y" or answer == "yes": complete_install = True
		else: complete_install = False
	else: print "\t\tNO"
	
	if complete_install:
		print "\nCreating default configuration...",
		if create_conf_file() == True: print "\t\t\tOK"
		else:
			print "\t\t\tFAIL"

		print "Creating initial postgres database...",
		if create_db(DB_TYPE, DB_PATH, DB_USER, DB_PASS) == True: print "\t\t\tOK"
		else:
			print "\t\t\tFAIL"
		print "Configuring startup services...",
		if conf_services() == True: print "\t\t\tOK"
		else:
			print "\t\t\tFAIL"
	
		print "\nTesting installation...\n"
		run_test()

		print "\nForecast has been successfully installed."
	sys.exit(1)

def realtime(search_name):
	conf = grab_config()
	DB_TYPE = None
	DB_PATH = None
	DB_USER = None
	DB_PASS = None

	if conf:
		DB_TYPE, DB_PATH, DB_USER, DB_PASS = parse_config(conf)
	else:
		print "ERROR: No configuration found! [Exiting]"
		sys.exit(2)

	if search_name == None:	sql_query = "SELECT * FROM vm_stats;"
	else: sql_query = "SELECT * FROM vm_stats WHERE vm_name ='" + search_name + "';"
	results = run_query(sql_query, DB_PATH, DB_USER, DB_PASS)

	if len(results.getresult()) > 0:
		unitCount = 0
		for result in results.getresult():
			print "VM Name:\t%s" % result[2]
			print "Forecast ID:\t%s" % result[0]
			print "VM Units:\t%d\n" % result[7]
			unitCount += result[7]

		if search_name == None: print "Total Units:\t%d" % unitCount
	else:
		print "ERROR: No results to export or unknown VM!"
		sys.exit(2)
	sys.exit(1)

def export():
	conf = grab_config()
	DB_TYPE = None
	DB_PATH = None
	DB_USER = None
	DB_PASS = None

	if conf:
		DB_TYPE, DB_PATH, DB_USER, DB_PASS = parse_config(conf)
	else:
		print "ERROR: No configuration found! [Exiting]"
		sys.exit(2)

	root = ET.Element("forecast")
	export_date = ET.SubElement(root, "export-date")
	export_date.text = str(time.ctime())

	sql_query = "SELECT * FROM vm_stats;"
	results = run_query(sql_query, DB_PATH, DB_USER, DB_PASS)

	if len(results.getresult()) > 0:
		unitCount = 0
		for result in results.getresult():
			start = ET.SubElement(root, "record")
			vm_name = ET.SubElement(start, "vm-name")
			vm_name.text = result[2]
			fc_id = ET.SubElement(start, "fc-id")
			fc_id.text = result[0]
			os = ET.SubElement(start, "os")
			os.text = str(result[4])
			vcpu = ET.SubElement(start, "vcpu")
			vcpu.text = str(result[5])
			memory = ET.SubElement(start, "memory")
			memory.text = str(result[6])
			vm_units = ET.SubElement(start, "units")
			vm_units.text = str(result[7])
			unitCount += result[7]
	else:
		print "ERROR: No results to export!"
		sys.exit(2)

	total_units = ET.SubElement(root, "total-units")
	total_units.text = str(unitCount)
	tree = ET.ElementTree(root)
	now = datetime.datetime.now()
	export_filename = "forecast-export-%s.xml" % now.strftime("%Y%m%d-%H%M")
	try:
		tree.write(export_filename, pretty_print=True)
		print "Forecast successfully exported to file: %s" % export_filename
	except:
		print "ERROR: Could not export database contents!"
		sys.exit(2)
	sys.exit(1)

def start_forecast():
	if check_running() == True:
		print "ERROR: Forecast is already running!"
		sys.exit(2)
	else:
		print "Forecast: Starting Service"
		os.system("service forecast-service start")
		sys.exit(1)

def kill_forecast():
	if check_running() == False:
		print "ERROR: Forecast is not running!"
		sys.exit(2)
	else:
		print "Forecast: Killing Service"
		os.system("service forecast-service stop")
		sys.exit(1)

try:
	options, other = getopt.getopt(sys.argv[1:], 'hskitcren:;', ['help','start','kill','install','test','configure','realtime','export','list','name=',])

except:
	print "Forecast: Unknown options specified. Use --help for information"
	sys.exit(2)

for opt, arg in options:
	if opt in ('-h', '--help'): usage()
	if opt in ('-s', '--start'): start_forecast()
	if opt in ('-k', '--kill'): kill_forecast()
	if opt in ('-i', '--install'):
		print "Forecast: Installing"
		print "--------------------\n"
		install()
	if opt in ('-t', '--test'):
		print "Forecast: Checking Configuration"
		print "--------------------------------\n"
		run_test()
	if opt in ('-l', '--list'): 
		print "Forecast: Listing Adaptors"
		print "--------------------------\n"		
		list_adaptors()
	if opt in ('-c', '--configure'): 
		print "Forecast: Configuring Adaptors"
		print "------------------------------\n"		
		configure()
	if opt in ('-r', '--realtime'):
		search_name = None
		for this_opt, this_arg in options:
			if this_opt in ('-n', '--name'): search_name = this_arg
		print "Forecast: Printing Real-time Statistics"
		print "---------------------------------------\n"
		print "Time Checked:\t%s\n" % time.ctime()
		realtime(search_name)
	if opt in ('-e', '--export'):
		print "Forecast: Exporting Database Content"
		print "------------------------------------\n"
		print "Export Time:\t%s\n" % time.ctime()
		export()

print "Forecast: No options specified. Use --help for usage"	
sys.exit(2)
